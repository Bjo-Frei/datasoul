/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package datasoul.render;

import datasoul.DatasoulMainForm;
import datasoul.config.ConfigObj;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 *
 * @author samuel
 */
public class LiteDatasoulVideoFrame extends javax.swing.JFrame implements DatasoulVideoFrameItf {

    private ContentDisplayRenderer contentDisplay;
    private ContentRender render;
    
    /**
     * Creates new form LiteDatasoulVideoFrame
     */
    public LiteDatasoulVideoFrame() {
        initComponents();
        DatasoulMainForm.setDatasoulIcon(this);
        contentDisplay = new ContentDisplayRenderer() {
            @Override
            public void repaint() {
                LiteDatasoulVideoFrame.this.repaint();
            }
        };    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void registerAsMain() {
        this.setBounds(ConfigObj.getActiveInstance().getMainOutputDeviceObj().getBounds());
        int w = ConfigObj.getActiveInstance().getMainOutputDeviceObj().getWidth();
        int h = ConfigObj.getActiveInstance().getMainOutputDeviceObj().getProportionalHeight(w);
        contentDisplay.initDisplay(w, h);
        render = new ContentRender(w, h, contentDisplay);
        ContentManager.getInstance().registerMainRender(render);
        this.setSize(w, h);
    }

    public void registerAsMonitor() {
        this.setBounds(ConfigObj.getActiveInstance().getMonitorOutputDeviceObj().getBounds());
        int w = ConfigObj.getActiveInstance().getMonitorOutputDeviceObj().getWidth();
        int h = ConfigObj.getActiveInstance().getMonitorOutputDeviceObj().getProportionalHeight(w);
        contentDisplay.initDisplay(w, h);
        render = new ContentRender(w, h, contentDisplay);
        ContentManager.getInstance().registerMonitorRender(render);
        this.setSize(w, h);
    }

    @Override
    public void paint(Graphics g) {
        BufferedImage img = contentDisplay.getActiveImage();
        if (img != null) {
            Graphics2D g2 = (Graphics2D) g;
            g2.setComposite(AlphaComposite.Src);
            synchronized (img) {
                g.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);
            }
        }
    }

    public ContentRender getContentRender() {
        return render;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void handleErrors() {
        // Ignore video handling
    }

    @Override
    public void pauseVideoItem() {
        // Ignore video handling
    }

    @Override
    public void playBackground() {
        // Ignore video handling
    }

    @Override
    public void playVideoItem(String path) {
        // Ignore video handling
    }

    @Override
    public void seekVideoItem(float position) {
        // Ignore video handling
    }

    @Override
    public void stopVideoItem() {
        // Ignore video handling
    }

    @Override
    public void videoItemCompleted() {
        // Ignore video handling
    }
}
