/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package datasoul.render.vlcj;

import datasoul.DatasoulMainForm;
import datasoul.config.BackgroundConfig;
import datasoul.config.ConfigObj;
import datasoul.render.ContentManager;
import datasoul.serviceitems.ServiceItemTable;
import datasoul.util.ObjectManager;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JWindow;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;
import uk.co.caprica.vlcj.player.MediaPlayerFactory;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;

/**
 *
 * @author samuel
 */
public class VlcjBackgroundFrame extends javax.swing.JFrame {
    
    private MediaPlayerFactory factory;
    private EmbeddedMediaPlayer mediaPlayer;
    private boolean playingItem;
    private JWindow overlayWindow;
    private boolean handlingErrors;
    
    /**
     * Creates new form VlcjBackgroundFrame
     */
    public VlcjBackgroundFrame() {
        initComponents();
        DatasoulMainForm.setDatasoulIcon(this);
        factory = new MediaPlayerFactory(new String[] {"--no-video-title-show"});
        mediaPlayer = factory.newMediaPlayer(null);
        mediaPlayer.addMediaPlayerEventListener(new MediaPlayerControl());
        Canvas c = new Canvas();
        this.getContentPane().setLayout(new BorderLayout());
        this.getContentPane().add(c, BorderLayout.CENTER);
        c.setBackground(Color.black);
        mediaPlayer.setVideoSurface(c);
        
    }
    
    public void handleErrors(){
        if (!handlingErrors){
            addWindowListener(new VlcjBackgroundFrameWindowAdapter());
            handlingErrors = true;
        }
    }

    public void setOverlay(JWindow win){
        mediaPlayer.setOverlay(win);
        overlayWindow = win;
    }

    @Override
    public void setVisible(boolean b){
        super.setVisible(b);
        mediaPlayer.enableOverlay(b);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void registerAsMain(){
        int w = ConfigObj.getActiveInstance().getMainOutputDeviceObj().getWidth();
        int h = ConfigObj.getActiveInstance().getMainOutputDeviceObj().getProportionalHeight(w);
        this.setSize(w, h);
    }
        

    public void registerAsMonitor(){
        int w = ConfigObj.getActiveInstance().getMonitorOutputDeviceObj().getWidth();
        int h = ConfigObj.getActiveInstance().getMonitorOutputDeviceObj().getProportionalHeight(w);
        this.setSize(w, h);
    }

    /*
     * This method is responsible for setting the appropriate background when a item stop playing
     */
    public void playBackground(){
        int mode = BackgroundConfig.getInstance().getModeAsInt();
        switch (mode){
            case BackgroundConfig.MODE_STATIC:
                mediaPlayer.stop();
                break;
            case BackgroundConfig.MODE_VIDEO:
                mediaPlayer.playMedia(BackgroundConfig.getInstance().getVideoFile(), "no-audio");
                break;
        }
    }
    
    /*
     * Called to play a Video Item
     */
    public void playVideoItem(String path){
        playingItem = true;
        if (BackgroundConfig.getInstance().getModeAsInt() == BackgroundConfig.MODE_STATIC){
            ContentManager.getInstance().setMainShowBackground(false);
        }
        ContentManager.getInstance().slideChange(-1);
        mediaPlayer.playMedia(path);
    }
    
    /* 
     * Force stop for a video item
     */
    public void stopVideoItem(){
        if (playingItem){
            mediaPlayer.stop();
            playBackground();
        }
    }
    
    /* 
     * Pause a Video Item
     */
    public void pauseVideoItem(){
        if (playingItem){
            mediaPlayer.pause();
        }
    }
    
    public void seekVideoItem(float position){
        mediaPlayer.setPosition(position);
    }
    
    private ServiceItemTable getLiveTable(){
        return ObjectManager.getInstance().getLivePanel().getLiveServiceItemTable();
    }
    
    /**
     * Called to clean up after video item finished
     */
    private void videoItemCompleted(){
        playingItem = false;
        if (BackgroundConfig.getInstance().getModeAsInt() == BackgroundConfig.MODE_STATIC){
            ContentManager.getInstance().setMainShowBackground(true);
        }
        ContentManager.getInstance().slideChange(-1);
        getLiveTable().notifyVideoEnd();
    }
    
    private class MediaPlayerControl extends MediaPlayerEventAdapter {

        @Override
        public void error(MediaPlayer mp) {
            System.out.println("Error");

        }

        @Override
        public void playing(MediaPlayer mp) {
            getLiveTable().videoPausedChanged(false);
        }

        @Override
        public void paused(MediaPlayer mp) {
            getLiveTable().videoPausedChanged(true);
        }

        @Override
        public void finished(MediaPlayer mp) {
            if (playingItem){
                videoItemCompleted();
                getLiveTable().videoPausedChanged(true);
            }
            playBackground();
        }

        @Override
        public void positionChanged(MediaPlayer mp, float f) {
            getLiveTable().videoPositionChanged(f);
        }

        @Override
        public void pausableChanged(MediaPlayer mp, int i) {
            getLiveTable().videoPausableChanged(i != 0);
        }

    }
    
    
    private class VlcjBackgroundFrameWindowAdapter extends WindowAdapter{
        @Override
        public void windowActivated(WindowEvent e) {
            overlayWindow.toFront();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
