/*
 * TemplateEditorPanel.java
 *
 * Created on December 25, 2005, 1:45 PM
 */

package datasoul.templates;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.event.InputEvent;
import java.io.FileOutputStream;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import org.apache.xml.serialize.OutputFormat;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

/**
 *
 * @author  samuelm
 */
public class TemplateEditorPanel extends javax.swing.JPanel
        implements javax.swing.event.TableModelListener {
    
    private TemplateItem selectedItem = null;
    private Point dragBegin;
    private Rectangle dragOrigSize;
    private JTable propTable;
    private DisplayTemplate template;
    
    /** Creates new form TemplateEditorPanel */
    public TemplateEditorPanel() {
        initComponents();
        template = new DisplayTemplate();
    }
    
    public void addItem(TemplateItem t){
        
        template.addItem(t);
        t.addTableModelListener(this);
        selectedItem = t;
        this.repaint();
        
    }
    
    @Override
    public void paint(java.awt.Graphics g) {
        
        super.paint(g);
        
        Graphics2D g2 =  (Graphics2D) g;
        
        template.paint(g2);
        
        // if this item is selected, draw a blue border
        if (selectedItem != null){
            
            // save old stroke and color
            Color oldColor = g2.getColor();
            Stroke oldStroke = g2.getStroke();
            
            // draw the border
            g2.setColor(Color.BLUE);
            g2.setStroke( new BasicStroke(2) );
            g2.drawRect( selectedItem.getLeft(), selectedItem.getTop(), selectedItem.getWidth(), selectedItem.getHeight() );
            
            // restore old settings
            g2.setColor(oldColor);
            g2.setStroke( oldStroke );
            
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(51, 255, 0));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setPreferredSize(new java.awt.Dimension(640, 480));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 457, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 305, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if ((selectedItem != null) && (dragBegin!=null)){
            
            // moving or resizing?
            if ( (evt.getModifiers() & InputEvent.SHIFT_MASK ) == 0 ){
                selectedItem.setLeft( (int) ( evt.getX() - dragBegin.getX() + dragOrigSize.getX() ) );
                selectedItem.setTop( (int) ( evt.getY() - dragBegin.getY() + dragOrigSize.getY() ) );
            }else{
                
                int newW = (int) ( dragOrigSize.getWidth() + evt.getX() - dragBegin.getX() );
                int newH = (int) ( dragOrigSize.getHeight() + evt.getY() - dragBegin.getY() );
                
                
                if (newW < 5) newW = 5;
                if (newH < 5) newH = 5;
                
                selectedItem.setWidth( newW );
                selectedItem.setHeight( newH );
            }
        }
        
    }//GEN-LAST:event_formMouseDragged
    
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        dragBegin = null;
    }//GEN-LAST:event_formMouseReleased
    
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        Point p = evt.getPoint();
        selectedItem = null;
        
        // scan the items array from the end to the beginning to
        // get first the upmost item at the clicked position
        for (int i=template.getItems().size()-1; i>=0; i--){
            TemplateItem t = template.getItems().get(i);
            if (t.containsPoint(p)){
                selectedItem = t;
                propTable.setDefaultEditor(Object.class, t.getTableCellEditor() );
                propTable.setModel(t);
                break;
            }
        }
        
        if ((selectedItem != null) && (selectedItem.containsPoint(p))){
            dragBegin = p;
            dragOrigSize = selectedItem.getBoundingRect().getBounds();
        }
        
        if (selectedItem == null && propTable != null){
            propTable.setModel(template);
        }
        
        this.repaint();
        
    }//GEN-LAST:event_formMousePressed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
    }//GEN-LAST:event_formMouseClicked
    
    public void setPropertiesTable(JTable prop){
        this.propTable = prop;
        prop.setModel(template);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    public void tableChanged(TableModelEvent e) {
        this.repaint();
        template.getModel().fireTableDataChanged();
    }
    
    public void deleteSelectedItem(){
        if (selectedItem != null){
            selectedItem.removeTableModelListener(this);
            template.removeItem(selectedItem);
            selectedItem = null;
            this.repaint();
        }
    }
    
    public DisplayTemplate getTemplate(){
        return this.template;
    }
    
    public void moveUpSelectedItem(){
        if (selectedItem != null){
            template.moveUp(selectedItem);
            template.getModel().fireTableDataChanged();
            this.repaint();
        }
    }

    public void moveDownSelectedItem(){
        if (selectedItem != null){
            template.moveDown(selectedItem);
            template.getModel().fireTableDataChanged();
            this.repaint();
        }
    }
    
    public void save(String filename){
        Node n;
        try {
            Node node = template.writeObject();
            Document doc = node.getOwnerDocument();
            doc.appendChild( node);                        // Add Root to Document
            FileOutputStream fos = new FileOutputStream( filename );
            org.apache.xml.serialize.XMLSerializer xs = new org.apache.xml.serialize.XMLSerializer();
            OutputFormat outFormat = new OutputFormat();
            outFormat.setIndenting(true);
            outFormat.setEncoding("ISO-8859-1");
            xs.setOutputFormat(outFormat);
            xs.setOutputByteStream(fos);
            xs.serialize(doc);
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
}
