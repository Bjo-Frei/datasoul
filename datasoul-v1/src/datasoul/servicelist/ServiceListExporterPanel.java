/*
 * ServiceListExporterPanel.java
 *
 * Created on June 4, 2008, 11:44 PM
 */

package datasoul.servicelist;

import com.lowagie.text.DocumentException;
import datasoul.DatasoulMainForm;
import datasoul.config.BackgroundConfig;
import datasoul.datashow.ServiceListTable;
import datasoul.datashow.TextServiceItem;
import datasoul.render.ContentRender;
import datasoul.song.Song;
import java.io.FileNotFoundException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author  samuel
 */
public class ServiceListExporterPanel extends javax.swing.JFrame {
    
    /** Creates new form ServiceListExporterPanel */
    public ServiceListExporterPanel() {
        initComponents();
        DatasoulMainForm.setDatasoulIcon(this);
        pbProgress.setVisible(false);
    }
    
    private Song singleSong = null;
    
    public void setSingleSong(Song s){
        singleSong = s;
        cbServicePlan.setSelected(false);
        cbServicePlan.setEnabled(false);
        rbSlides.setEnabled(false);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        cbServicePlan = new javax.swing.JCheckBox();
        cbLyrics = new javax.swing.JCheckBox();
        cbChordsSimple = new javax.swing.JCheckBox();
        cbChordsComplete = new javax.swing.JCheckBox();
        cbOk = new javax.swing.JButton();
        lblFormat = new javax.swing.JLabel();
        cbFormat = new javax.swing.JComboBox();
        cbCancel = new javax.swing.JButton();
        rbPrintout = new javax.swing.JRadioButton();
        rbSlides = new javax.swing.JRadioButton();
        pbProgress = new javax.swing.JProgressBar();
        cbEmptySlide = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("datasoul/internationalize"); // NOI18N
        setTitle(bundle.getString("Export_Service_List")); // NOI18N

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD));
        jLabel1.setText(bundle.getString("Select_sessions_to_export:")); // NOI18N

        cbServicePlan.setSelected(true);
        cbServicePlan.setText(bundle.getString("Service_Plan")); // NOI18N
        cbServicePlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbServicePlanActionPerformed(evt);
            }
        });

        cbLyrics.setSelected(true);
        cbLyrics.setText(bundle.getString("Song_Lyrics_and_Texts_Items")); // NOI18N
        cbLyrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLyricsActionPerformed(evt);
            }
        });

        cbChordsSimple.setSelected(true);
        cbChordsSimple.setText(bundle.getString("Songs_Chords_Simple")); // NOI18N

        cbChordsComplete.setSelected(true);
        cbChordsComplete.setText(bundle.getString("Songs_Chords_Complete")); // NOI18N

        cbOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/datasoul/icons/v2/dialog-apply.png"))); // NOI18N
        cbOk.setText(bundle.getString("Ok")); // NOI18N
        cbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOkActionPerformed(evt);
            }
        });

        lblFormat.setText(bundle.getString("Format")); // NOI18N

        cbFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PDF", "RTF" }));

        cbCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/datasoul/icons/v2/process-stop.png"))); // NOI18N
        cbCancel.setText(bundle.getString("Cancel")); // NOI18N
        cbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCancelActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbPrintout);
        rbPrintout.setSelected(true);
        rbPrintout.setText("Printouts");
        rbPrintout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPrintoutActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbSlides);
        rbSlides.setText("Slides");
        rbSlides.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSlidesActionPerformed(evt);
            }
        });

        cbEmptySlide.setSelected(true);
        cbEmptySlide.setText("Add an empty slide between service items");
        cbEmptySlide.setEnabled(false);
        cbEmptySlide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEmptySlideActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(cbEmptySlide))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addComponent(cbCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbOk))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbServicePlan)
                            .addComponent(cbLyrics)
                            .addComponent(cbChordsSimple)
                            .addComponent(cbChordsComplete)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFormat)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(rbPrintout)
                    .addComponent(jLabel1)
                    .addComponent(rbSlides))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbPrintout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbServicePlan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbLyrics)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbChordsSimple)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbChordsComplete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFormat)
                    .addComponent(cbFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbSlides)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEmptySlide)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbOk)
                        .addComponent(cbCancel))
                    .addComponent(pbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbServicePlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbServicePlanActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_cbServicePlanActionPerformed

    private void cbLyricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLyricsActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_cbLyricsActionPerformed

    private void exportSlides(String fileName) throws FileNotFoundException, DocumentException{

        ServiceListExporterSlides sles = new ServiceListExporterSlides(fileName);
        try{
            ServiceListTable slt =  ServiceListTable.getActiveInstance();
            ContentRender r = sles.getRender();
            r.paintBackground( BackgroundConfig.getInstance().getMainBackgroundImg());
            int slideCount = 0;

            /* initial empty slide */
            if (cbEmptySlide.isSelected()){
                sles.addEmptySlide();
                slideCount++;
            }

            pbProgress.setMaximum(slt.getRowCount());
            for (int i=0; i<slt.getRowCount(); i++){
                Object o = slt.getServiceItem(i);
                pbProgress.setValue(i);
                if (o instanceof Song){
                    Song s = (Song) o;
                    r.setTemplate(s.getTemplate());
                    r.setTitle(s.getTitle());
                    r.setSongAuthor(s.getSongAuthor());
                    r.setSongSource(s.getSongSource());
                    r.setCopyright(s.getCopyright());
                    for (int k=0; k<s.getRowCount(); k++){
                        slideCount++;
                        r.setSlide(s.getSlideText(k));
                        if (k < s.getRowCount()-1){
                            r.setNextSlide(s.getSlideText(k+1));
                        }else{
                            r.setNextSlide("");
                        }
                        /* start rendering */
                        r.slideChange(-1);
                        /* wait render thread to render the slide */
                        while (slideCount > sles.getSlideCount()){
                            try {
                                Thread.sleep(200);
                            } catch (InterruptedException ex) {
                               // ignore
                            }
                            if (sles.getSlideCount() == -1){
                                throw new DocumentException("Internal Error");
                            }
                        }
                    }
                    /* empty slide after songs */
                    if (cbEmptySlide.isSelected()){
                        sles.addEmptySlide();
                        slideCount++;
                    }

                }else if (o instanceof TextServiceItem){
                    TextServiceItem t = (TextServiceItem) o;
                    r.setTemplate(t.getTemplate());
                    r.setTitle(t.getTitle());
                    for (int k=0; k<t.getRowCount(); k++){
                        slideCount++;
                        r.setSlide(t.getSlideText(k));
                        if (k < t.getRowCount()-1){
                            r.setNextSlide(t.getSlideText(k+1));
                        }else{
                            r.setNextSlide("");
                        }
                        /* start rendering */
                        r.slideChange(-1);
                        /* wait render thread to render the slide */
                        while (slideCount > sles.getSlideCount()){
                            try {
                                Thread.sleep(200);
                            } catch (InterruptedException ex) {
                                // ignore
                            }
                            if (sles.getSlideCount() == -1){
                                throw new DocumentException("Internal Error");
                            }
                        }
                    }
                    /* empty slide after text */
                    if (cbEmptySlide.isSelected()){
                        sles.addEmptySlide();
                        slideCount++;
                    }

                }
            }
            pbProgress.setValue(slt.getRowCount());
            sles.write();

        }finally{
            sles.cleanup();
        }

    }

    private void exportPrintout(int type, String fileName) throws DocumentException, FileNotFoundException{
        ServiceListExporterDocument sled = new ServiceListExporterDocument(type, fileName);

        if (singleSong == null){

            if (cbServicePlan.isSelected()){
                sled.addServicePlan();
            }

            ServiceListTable slt =  ServiceListTable.getActiveInstance();
            pbProgress.setMaximum(slt.getRowCount());
            for (int i=0; i<slt.getRowCount(); i++){
                Object o = slt.getServiceItem(i);
                pbProgress.setValue(i);
                if (o instanceof Song){
                    if (cbLyrics.isSelected()){
                        sled.addSongLyrics((Song)o);
                    }
                    if (cbChordsSimple.isSelected()){
                        sled.addSongChordsSimple((Song)o);
                    }
                    if (cbChordsComplete.isSelected()){
                        sled.addSongChordsComplete((Song)o);
                    }
                }else if (o instanceof TextServiceItem){
                    if (cbLyrics.isSelected()){
                        sled.addTextItem((TextServiceItem)o);
                    }
                }
            }
            pbProgress.setValue(slt.getRowCount());

        }else{
            if (cbLyrics.isSelected()){
                sled.addSongLyrics(singleSong);
            }
            if (cbChordsSimple.isSelected()){
                sled.addSongChordsSimple(singleSong);
            }
            if (cbChordsComplete.isSelected()){
                sled.addSongChordsComplete(singleSong);
            }

        }

        sled.write();

    }

    private void cbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOkActionPerformed

        String fileName = null;

        // Choose PDF or RTF
        int type =  ServiceListExporterDocument.TYPE_PDF;
        String fileextension = ".pdf";

        if (rbPrintout.isSelected() && cbFormat.getSelectedIndex() == 1){
            type = ServiceListExporterDocument.TYPE_RTF;
            fileextension = ".rtf";
        }

        // Ask for file to save
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Select_the_file_to_save."));
        if (fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            fileName = fc.getSelectedFile().getPath();
            if (!fileName.contains(fileextension)) {
                fileName = fileName + fileextension;
            }
        }


        // Process it
        if (fileName != null){

            enablePrintoutControls(false);
            enableSlideControls(false);
            rbPrintout.setEnabled(false);
            rbSlides.setEnabled(false);
            cbCancel.setEnabled(false);
            cbOk.setEnabled(false);

            pbProgress.setVisible(true);
            Thread t = new ProcessThread(type, fileName, rbSlides.isSelected());
            t.start();
        }
            
}//GEN-LAST:event_cbOkActionPerformed

       
    private void cbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCancelActionPerformed
        dispose();
    }//GEN-LAST:event_cbCancelActionPerformed

    private void enablePrintoutControls(boolean b){
        cbChordsComplete.setEnabled(b);
        cbChordsSimple.setEnabled(b);
        cbLyrics.setEnabled(b);
        cbServicePlan.setEnabled(b);
        lblFormat.setEnabled(b);
        cbFormat.setEnabled(b);
    }

    private void enableSlideControls(boolean b){
        cbEmptySlide.setEnabled(b);
    }


    private void rbPrintoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPrintoutActionPerformed
        enablePrintoutControls(true);
        enableSlideControls(false);
    }//GEN-LAST:event_rbPrintoutActionPerformed

    private void rbSlidesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSlidesActionPerformed
        enablePrintoutControls(false);
        enableSlideControls(true);
    }//GEN-LAST:event_rbSlidesActionPerformed

    private void cbEmptySlideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEmptySlideActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEmptySlideActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cbCancel;
    private javax.swing.JCheckBox cbChordsComplete;
    private javax.swing.JCheckBox cbChordsSimple;
    private javax.swing.JCheckBox cbEmptySlide;
    private javax.swing.JComboBox cbFormat;
    private javax.swing.JCheckBox cbLyrics;
    private javax.swing.JButton cbOk;
    private javax.swing.JCheckBox cbServicePlan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblFormat;
    private javax.swing.JProgressBar pbProgress;
    private javax.swing.JRadioButton rbPrintout;
    private javax.swing.JRadioButton rbSlides;
    // End of variables declaration//GEN-END:variables

    private class ProcessThread extends Thread {
        private int type;
        private String fileName;
        private boolean slides;

        public ProcessThread(int type, String fileName, boolean slides){
            this.type = type;
            this.fileName = fileName;
            this.slides = slides;
        }
        public void run(){
            try{
                if (slides){
                    exportSlides(fileName);
                }else{
                    exportPrintout(type, fileName);
                }
                JOptionPane.showMessageDialog(ServiceListExporterPanel.this, java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Document_created_successfully"));
            }catch(Exception e){
                JOptionPane.showMessageDialog(ServiceListExporterPanel.this, java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Error_creating_document:_")+e.getMessage());
            }
            (ServiceListExporterPanel.this).dispose();
        }
    }
}
