/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BibleInstaller.java
 *
 * Created on Apr 16, 2009, 11:08:10 PM
 */
package datasoul.bible;

import datasoul.DatasoulMainForm;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Comparator;
import java.util.Collections;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.crosswire.jsword.book.install.InstallManager;
import org.crosswire.jsword.book.install.Installer;
import org.crosswire.jsword.book.install.InstallException;
import org.crosswire.jsword.book.Book;
import org.crosswire.jsword.book.Books;
import org.crosswire.jsword.book.BookException;
import org.crosswire.jsword.book.BookFilters;



/**
 *
 * @author samuel
 */
public class BibleInstaller extends javax.swing.JFrame {

    protected InstallManager imanager;
    protected MyBookTableModel myAvailableModel;
    protected MyBookTableModel myInstalledModel;

    private static boolean downloadAllowed = false;

    /** Creates new form BibleInstaller */
    public BibleInstaller() {
        initComponents();
        DatasoulMainForm.setDatasoulIcon(this);

        Logger.getLogger("").setLevel(Level.OFF);

        // An installer knows how to install books
        imanager = new InstallManager();

        myAvailableModel = new MyBookTableModel();
        tblAvailable.setModel(myAvailableModel);
        tblAvailable.getColumnModel().getColumn(0).setPreferredWidth(80);
        tblAvailable.getColumnModel().getColumn(1).setPreferredWidth(400);

        myInstalledModel = new MyBookTableModel();
        tblInstalled.setModel(myInstalledModel);
        tblInstalled.getColumnModel().getColumn(0).setPreferredWidth(80);
        tblInstalled.getColumnModel().getColumn(1).setPreferredWidth(400);

        updateComboboxes();
        updateInstalled();
        updateAvailable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbSource = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblInstalled = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblInstalledCount = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAvailable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnInstallSelected = new javax.swing.JButton();
        lblAvailableCount = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("datasoul/internationalize"); // NOI18N
        setTitle(bundle.getString("Datasoul_-_Bible_Manager")); // NOI18N

        cbSource.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSourceActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("Installation_Source:")); // NOI18N

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/datasoul/icons/v2/view-refresh.png"))); // NOI18N
        btnRefresh.setText(bundle.getString("Refresh_All")); // NOI18N
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        tblInstalled.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblInstalled.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tblInstalled);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/datasoul/icons/v2/edit-delete.png"))); // NOI18N
        btnDelete.setText(bundle.getString("Uninstall_Selected")); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel3.setText(bundle.getString("Installed_Bibles:")); // NOI18N

        lblInstalledCount.setText("jLabel4");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblInstalledCount)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 215, Short.MAX_VALUE)
                .add(btnDelete)
                .addContainerGap())
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnDelete)
                    .add(jLabel3)
                    .add(lblInstalledCount))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        tblAvailable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblAvailable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblAvailable);

        jLabel2.setText(bundle.getString("Bibles_Available_for_Download:")); // NOI18N

        btnInstallSelected.setIcon(new javax.swing.ImageIcon(getClass().getResource("/datasoul/icons/v2/stock_insert-url.png"))); // NOI18N
        btnInstallSelected.setText(bundle.getString("Download_Selected")); // NOI18N
        btnInstallSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInstallSelectedActionPerformed(evt);
            }
        });

        lblAvailableCount.setText("jLabel4");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblAvailableCount)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 117, Short.MAX_VALUE)
                .add(btnInstallSelected)
                .addContainerGap())
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnInstallSelected)
                    .add(jLabel2)
                    .add(lblAvailableCount))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/datasoul/icons/v2/window-close.png"))); // NOI18N
        btnClose.setText(bundle.getString("Close")); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cbSource, 0, 297, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnRefresh))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btnClose))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(btnRefresh)
                    .add(cbSource, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static boolean checkDownloadAllowed(JPanel parent){
        if (! BibleInstaller.downloadAllowed){
            int allow = JOptionPane.showConfirmDialog(parent,
                    java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("This_operation_require_internet_access.") + "\n" +
                    java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("If_you_live_in_a_country_where_christians_are_presecuted_and_do_not_wish_to_risk_detection_you_should_not_proceed.") + "\n" +
                    java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Do_you_want_to_continue?"),
                    java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Datasoul_-_Warning"), JOptionPane.YES_NO_OPTION);
            if (allow == JOptionPane.YES_OPTION){
                BibleInstaller.downloadAllowed = true;
           }
        }
        return BibleInstaller.downloadAllowed;
    }

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed

        final ProgressDialog pd = new ProgressDialog(BibleInstaller.this, true);
        pd.isBibleDownload(false);
        pd.setText(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Updating_Available_Bibles"));
        pd.setLocationRelativeTo(this);

        Thread t = new Thread() {

            @Override
            public void run() {

                // Ask the Install Manager for a map of all known module sites
                Map installers = imanager.getInstallers();

                // Get all the installers one after the other
                Iterator iter = installers.entrySet().iterator();
                while (iter.hasNext()) {
                    Map.Entry mapEntry = (Map.Entry) iter.next();
                    try {
                        pd.setStatus(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Updating_") + " " + mapEntry.getKey().toString() + "...");
                        ((Installer) mapEntry.getValue()).reloadBookList();
                    } catch (InstallException ex) {
                        System.out.println(ex.getMessage());
                    }
                }
                pd.dispose();
            }
        };
        t.start();
        pd.setVisible(true);

    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnInstallSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInstallSelectedActionPerformed

        if (tblAvailable.getSelectedRow() < 0) {
            return;
        }

        Book book = myAvailableModel.getBook(tblAvailable.getSelectedRow());

        // Check if already installed
        if (Books.installed().getBook(book.getInitials()) != null) {
            JOptionPane.showMessageDialog(this, book.getName() + " " + java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("is_already_installed."));
            return;
        }

        if (JOptionPane.showConfirmDialog(this, java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Are_you_sure_to_download_and_install") + " " + book.getName() + " ?", java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Confirm_Download_and_Install"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                ProgressDialog pd = new ProgressDialog(this, true);
                pd.setText(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Downloading..."));
                pd.isBibleDownload(true);
                pd.setLocationRelativeTo(this);

                Installer installer = imanager.getInstaller(cbSource.getSelectedItem().toString());
                installer.install(book);

                pd.setVisible(true);
                updateInstalled();

            } catch (InstallException ex) {
                ex.printStackTrace();
            }
        }


    }//GEN-LAST:event_btnInstallSelectedActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        if (tblInstalled.getSelectedRow() < 0) {
            return;
        }

        Book selected = myInstalledModel.getBook(tblInstalled.getSelectedRow());

        if (JOptionPane.showConfirmDialog(this, java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Are_you_sure_to_uninstall") + " " + selected.getName() + " ?", java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Confirm_Uninstall"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                Books.installed().removeBook(selected);
            } catch (BookException ex) {
                ex.printStackTrace();
            }
        }

        updateInstalled();

}//GEN-LAST:event_btnDeleteActionPerformed

    private void cbSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSourceActionPerformed
        updateAvailable();
    }//GEN-LAST:event_cbSourceActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    public void updateComboboxes() {

        cbSource.removeAllItems();

        // Ask the Install Manager for a map of all known module sites
        Map installers = imanager.getInstallers();

        // Get all the installers one after the other
        Iterator iter = installers.entrySet().iterator();
        while (iter.hasNext()) {
            Map.Entry mapEntry = (Map.Entry) iter.next();
            cbSource.addItem(mapEntry.getKey());
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInstallSelected;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox cbSource;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblAvailableCount;
    private javax.swing.JLabel lblInstalledCount;
    private javax.swing.JTable tblAvailable;
    private javax.swing.JTable tblInstalled;
    // End of variables declaration//GEN-END:variables

    public void updateAvailable() {
        if (cbSource.getSelectedIndex() >= 0) {
            myAvailableModel.setNewList(imanager.getInstaller(cbSource.getSelectedItem().toString()).getBooks(BookFilters.getOnlyBibles()));
        }
        lblAvailableCount.setText("(" + Integer.toString(tblAvailable.getRowCount()) + ")");
    }

    public void updateInstalled() {
        myInstalledModel.setNewList(Books.installed().getBooks(BookFilters.getOnlyBibles()));
        lblInstalledCount.setText("(" + Integer.toString(tblInstalled.getRowCount()) + ")");
    }

    public class MyBookTableModel extends DefaultTableModel {

        List<Book> list;

        public MyBookTableModel() {
            this.list = new ArrayList<Book>();
        }

        public Book getBook(int i) {
            return list.get(i);
        }

        @SuppressWarnings("unchecked")
        public void setNewList(List newlist) {
            list = new ArrayList<Book>(newlist);
            Comparator<Book> langcomp = new Comparator<Book>() {

                public int compare(Book arg0, Book arg1) {
                    return arg0.getLanguage().getName().compareTo(arg1.getLanguage().getName());
                }
            };
            Collections.sort(list, langcomp);
            fireTableDataChanged();
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public int getRowCount() {
            if (list != null) {
                return list.size();
            } else {
                return 0;
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            if (list != null) {
                switch (column) {
                    case 0:
                        return list.get(row).getLanguage();
                    case 1:
                        return list.get(row).getName();
                    default:
                        return null;
                }
            } else {
                return "";
            }
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Language");
                case 1:
                    return java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Bible");
            }
            return "";
        }
    }
}
