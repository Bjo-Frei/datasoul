/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BibleTextPanel.java
 *
 * Created on Apr 20, 2009, 10:10:17 AM
 */
package datasoul.bible;

import datasoul.datashow.TextServiceItem;
import org.crosswire.jsword.versification.BibleInfo;
import javax.swing.JTextArea;
import java.util.List;
import javax.swing.JOptionPane;
import org.crosswire.jsword.book.Book;
import org.crosswire.jsword.book.Books;
import org.crosswire.jsword.book.BookFilters;
import org.crosswire.jsword.book.BooksEvent;
import org.crosswire.jsword.book.BooksListener;
import org.crosswire.jsword.book.BookData;
import org.crosswire.jsword.book.OSISUtil;
import org.crosswire.jsword.passage.NoSuchVerseException;
import org.crosswire.jsword.passage.Verse;


/**
 *
 * @author samuel
 */
public class BibleTextPanel extends javax.swing.JPanel {

    private MyBooksListener listener;
    private JTextArea txtArea;
    private int chapter;
    private int versefrom;
    private int verseto;

    /** Creates new form BibleTextPanel */
    public BibleTextPanel() {
        initComponents();

        listener = new MyBooksListener(this);
        Books.installed().addBooksListener(listener);
        updateBibles();


        // cbHowToSplit options
        // Keep the current idem ordem. They are handled by their index in Load.
        cbHowToSplit.removeAllItems();
        cbHowToSplit.addItem(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Sections"));
        cbHowToSplit.addItem(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Slides"));
        cbHowToSplit.addItem(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Continuous"));

        // cbRefType options
        // Keep the current idem ordem. They are handled by their index in Load.
        cbRefType.removeAllItems();
        cbRefType.addItem(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Full"));
        cbRefType.addItem(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Chapter_and_Verse"));
        cbRefType.addItem(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Verse_Only"));
        cbRefType.addItem(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("None"));
        cbRefType.setSelectedIndex(1);

        // Setup bible books
        cbBook.removeAllItems();
        for (int i = 0; i < BibleInfo.booksInBible(); i++) {
            try {
                cbBook.addItem(BibleInfo.getPreferredBookName(i + 1));
            } catch (NoSuchVerseException ex) {
                ex.printStackTrace();
            }
        }


    }

    public void registerTextArea(JTextArea area) {
        this.txtArea = area;
    }

    public void onClose() {
        Books.installed().removeBooksListener(listener);
    }

    public void updateBibles() {

        cbBibles.removeAllItems();

        List installed = Books.installed().getBooks(BookFilters.getOnlyBibles());

        for (Object o : installed) {
            if (o instanceof Book) {
                cbBibles.addItem(((Book) o).getName());
            }
        }

        boolean hasAny = installed.size() > 0;

        cbBibles.setEnabled(hasAny);
        cbBook.setEnabled(hasAny);
        cbChapter.setEnabled(hasAny);
        cbHowToSplit.setEnabled(hasAny);
        cbRefType.setEnabled(hasAny);
        cbVersesFrom.setEnabled(hasAny);
        cbVersesTo.setEnabled(hasAny);
        btnLoad.setEnabled(hasAny);

    }

    static class MyBooksListener implements BooksListener {

        private BibleTextPanel orig;

        public MyBooksListener(BibleTextPanel orig) {
            this.orig = orig;
        }

        public void bookAdded(BooksEvent ev) {
            orig.updateBibles();
        }

        public void bookRemoved(BooksEvent ev) {
            orig.updateBibles();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        cbBibles = new javax.swing.JComboBox();
        btnManageBible = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbHowToSplit = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cbRefType = new javax.swing.JComboBox();
        btnLoad = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cbBook = new javax.swing.JComboBox();
        cbChapter = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cbVersesFrom = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cbVersesTo = new javax.swing.JComboBox();

        setMinimumSize(new java.awt.Dimension(443, 101));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("datasoul/internationalize"); // NOI18N
        jLabel3.setText(bundle.getString("Bible:")); // NOI18N

        cbBibles.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnManageBible.setIcon(new javax.swing.ImageIcon(getClass().getResource("/datasoul/icons/v2/stock_data-sources-new.png"))); // NOI18N
        btnManageBible.setText(bundle.getString("Manage_Installed_Bibles")); // NOI18N
        btnManageBible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageBibleActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("Verses:")); // NOI18N

        jLabel2.setText(bundle.getString("Put_verses_in")); // NOI18N

        cbHowToSplit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText(bundle.getString("Add_reference")); // NOI18N

        cbRefType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/datasoul/icons/v2/stock_edit-bookmark.png"))); // NOI18N
        btnLoad.setText(bundle.getString("Load")); // NOI18N
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        cbBook.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBookActionPerformed(evt);
            }
        });
        jPanel1.add(cbBook);

        cbChapter.setEditable(true);
        cbChapter.setPreferredSize(new java.awt.Dimension(70, 25));
        cbChapter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbChapterActionPerformed(evt);
            }
        });
        cbChapter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbChapterFocusLost(evt);
            }
        });
        jPanel1.add(cbChapter);

        jLabel4.setText(":");
        jPanel1.add(jLabel4);

        cbVersesFrom.setEditable(true);
        cbVersesFrom.setPreferredSize(new java.awt.Dimension(70, 25));
        cbVersesFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVersesFromActionPerformed(evt);
            }
        });
        cbVersesFrom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cbVersesFromFocusGained(evt);
            }
        });
        jPanel1.add(cbVersesFrom);

        jLabel5.setText("-");
        jPanel1.add(jLabel5);

        cbVersesTo.setEditable(true);
        cbVersesTo.setPreferredSize(new java.awt.Dimension(70, 25));
        cbVersesTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVersesToActionPerformed(evt);
            }
        });
        jPanel1.add(cbVersesTo);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cbHowToSplit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cbRefType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnLoad))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel3)
                                .add(25, 25, 25))
                            .add(layout.createSequentialGroup()
                                .add(jLabel1)
                                .add(18, 18, 18)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(cbBibles, 0, 209, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(btnManageBible))
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(cbBibles, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(btnManageBible))
                    .add(layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jLabel3)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel1)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(8, 8, 8)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(cbHowToSplit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(cbRefType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnLoad)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnManageBibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageBibleActionPerformed

        if (BibleInstaller.checkDownloadAllowed(this)){
            BibleInstaller bi = new BibleInstaller();
            bi.setLocationRelativeTo(this);
            bi.setVisible(true);
        }
}//GEN-LAST:event_btnManageBibleActionPerformed

    private void cbBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBookActionPerformed
        cbChapter.removeAllItems();
        if (cbBook.getSelectedIndex() >= 0) {

            try {
                int max = BibleInfo.chaptersInBook(cbBook.getSelectedIndex() + 1);
                for (int i = 0; i < max; i++) {
                    cbChapter.addItem(Integer.toString(i + 1));
                }
            } catch (NoSuchVerseException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_cbBookActionPerformed

    private void cbChapterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbChapterActionPerformed

        if (cbChapter.getItemCount() > chapter && cbChapter.getSelectedIndex() < 0) {
            cbChapter.setSelectedIndex(chapter);
            return;
        }

        cbVersesFrom.removeAllItems();
        cbVersesTo.removeAllItems();

        if (cbBook.getSelectedIndex() >= 0 && cbChapter.getSelectedIndex() >= 0) {

            try {
                int max = BibleInfo.versesInChapter(cbBook.getSelectedIndex() + 1, cbChapter.getSelectedIndex() + 1);
                for (int i = 0; i < max; i++) {
                    cbVersesFrom.addItem(Integer.toString(i + 1));
                    cbVersesTo.addItem(Integer.toString(i + 1));
                }
            } catch (NoSuchVerseException ex) {
                ex.printStackTrace();
            }
            chapter = cbChapter.getSelectedIndex();
        }
    }//GEN-LAST:event_cbChapterActionPerformed

    private void cbVersesToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVersesToActionPerformed
        int index = cbVersesTo.getSelectedIndex();
        if (cbVersesTo.getItemCount() > verseto && (index < 0 || index < cbVersesFrom.getSelectedIndex())) {
            cbVersesTo.setSelectedIndex(verseto);
        } else {
            verseto = index;
        }
}//GEN-LAST:event_cbVersesToActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed

        int begin = cbVersesFrom.getSelectedIndex() + 1;
        int end = cbVersesTo.getSelectedIndex() + 1;

        if (begin > end) {
            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Invalid_verse_range"));
            return;
        }

        Book book = Books.installed().getBook(cbBibles.getSelectedItem().toString());
        if (book == null) {
            return;
        }

        StringBuffer sb = new StringBuffer();

        if (txtArea.getText().length() > 0) {
            sb.append(txtArea.getText() + "\n");
        }

        try {
            for (int i = begin; i <= end; i++) {
                Verse temp = new Verse(cbBook.getSelectedIndex() + 1, cbChapter.getSelectedIndex() + 1, i);
                BookData data = new BookData(book, temp);
                String versetext = OSISUtil.getCanonicalText(data.getOsisFragment());

                // Skip blank lines (this may happen if the selected bible does not
                // contain the choosed text, it may be a New Testment only, for example)
                if (versetext.trim().length() == 0) {
                    continue;
                }

                // Add break if needed
                if (sb.length() > 0) {
                    if (cbHowToSplit.getSelectedIndex() == 1) {
                        sb.append(TextServiceItem.SLIDE_BREAK + "\n");
                    } else if (cbHowToSplit.getSelectedIndex() == 0) {
                        sb.append(TextServiceItem.CHORUS_MARK + "\n");
                    }
                }

                // Add the reference, if needed
                switch (cbRefType.getSelectedIndex()) {
                    case 0: // Full
                        sb.append(cbBook.getSelectedItem().toString());
                        sb.append(" ");
                    // do not break
                    case 1: // chapter + verse
                        sb.append(cbChapter.getSelectedItem().toString());
                        sb.append(":");
                    // do not break
                    case 2: // verse only
                        sb.append(Integer.toString(i));
                        sb.append(" ");
                        break;
                }

                // Add the text
                sb.append(versetext.trim() + "\n");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        txtArea.setText(sb.toString());
    }//GEN-LAST:event_btnLoadActionPerformed

    private void cbChapterFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbChapterFocusLost
    }//GEN-LAST:event_cbChapterFocusLost

    private void cbVersesFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVersesFromActionPerformed
        if (cbVersesFrom.getItemCount() > versefrom && cbVersesFrom.getSelectedIndex() < 0) {
            cbVersesFrom.setSelectedIndex(versefrom);
        } else {
            versefrom = cbVersesFrom.getSelectedIndex();
            if (cbVersesTo.getItemCount() == cbVersesFrom.getItemCount() &&
                    cbVersesTo.getSelectedIndex() < cbVersesFrom.getSelectedIndex()) {
                cbVersesTo.setSelectedIndex(cbVersesFrom.getSelectedIndex());
            }
        }
    }//GEN-LAST:event_cbVersesFromActionPerformed

    private void cbVersesFromFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbVersesFromFocusGained
    }//GEN-LAST:event_cbVersesFromFocusGained
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnManageBible;
    private javax.swing.JComboBox cbBibles;
    private javax.swing.JComboBox cbBook;
    private javax.swing.JComboBox cbChapter;
    private javax.swing.JComboBox cbHowToSplit;
    private javax.swing.JComboBox cbRefType;
    private javax.swing.JComboBox cbVersesFrom;
    private javax.swing.JComboBox cbVersesTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
