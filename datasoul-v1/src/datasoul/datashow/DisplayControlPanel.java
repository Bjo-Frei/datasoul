/*
 * DisplayControlPanel.java
 *
 * Created on 24 May 2006, 23:14
 */

package datasoul.datashow;

import datasoul.ConfigObj;
import datasoul.render.ContentManager;
import datasoul.templates.TemplateComboBox;
import java.awt.Event;
import java.util.Hashtable;
import javax.swing.JLabel;

/**
 *
 * @author  samuelm
 */
public class DisplayControlPanel extends javax.swing.JPanel {
    
    private boolean isMainOnBlack = false;
    private boolean isMainOnClean = false;
    
    /**
     * Creates new form DisplayControlPanel
     */
    public DisplayControlPanel() {
        initComponents();
        
        templateMonitor.setSelectedItem(ConfigObj.getInstance().getTemplateMonitor());
        jSliderShowHideSpeed.setValue( ConfigObj.getInstance().getSlideShowHideTime() / 100 );
        jSliderSlideChangeSpeed.setValue( ConfigObj.getInstance().getSlideTransitionTime() / 100 );
        cbMonitorFollowMain.setSelected( ConfigObj.getInstance().getMonitorFollowMainControls() );
        updateMonitorControls();
 
        Hashtable<Integer, JLabel> labels = new Hashtable<Integer, JLabel>();
        labels.put( 0, new JLabel("0s") );
        labels.put( 10, new JLabel("1s") );
        labels.put( 20, new JLabel("2s") );
        labels.put( 30, new JLabel("3s") );
        jSliderShowHideSpeed.setLabelTable(labels);
        jSliderSlideChangeSpeed.setLabelTable(labels);

        templateMonitor.setFilterType(TemplateComboBox.FILTER_MONITOR);
        
        
    }

    
    public void mainDisplayBlack(){
        if ( ConfigObj.getInstance().getMainOutput() ){
            if( !isMainOnBlack ){
                ContentManager.getMainDisplay().setBlack( 1 );
                isMainOnBlack = true;
                btnMainBlack.setSelected(true);
            }else{
                ContentManager.getMainDisplay().setBlack( 0 );
                isMainOnBlack = false;
                btnMainBlack.setSelected(false);
            }
        }

        if (ConfigObj.getInstance().getMonitorFollowMainControls()){
            btnMonitorBlack.setSelected( btnMainBlack.isSelected() );
            btnMonitorBlackActionPerformed(null);
        }
    }
    public void mainDisplayClean(){
        if ( ConfigObj.getInstance().getMainOutput() ){
            if( !isMainOnClean ){
                ContentManager.getMainDisplay().setClear( 1 );
                isMainOnClean = true;
                btnMainClear.setSelected(true);
            }else{
                ContentManager.getMainDisplay().setClear( 0 );
                isMainOnClean = false;
                btnMainClear.setSelected(false);
            }
        }
        
        if (ConfigObj.getInstance().getMonitorFollowMainControls()){
            btnMonitorClear.setSelected( btnMainClear.isSelected() );
            btnMonitorClearActionPerformed(null);
        }
    }
    
    public void mainDisplayShow(){
        int time = ConfigObj.getInstance().getSlideShowHideTime();
        
        ContentManager.getMainDisplay().slideShow( time );
        
        btnShow.setSelected(true);
        btnHide.setSelected(false);
        
        if (ConfigObj.getInstance().getMonitorFollowMainControls()){
            monitorDisplayShow();
        }
    }
    
    public void mainDisplayHide(){
        int time = ConfigObj.getInstance().getSlideShowHideTime();
        
        ContentManager.getMainDisplay().slideHide( time );

        btnShow.setSelected(false);
        btnHide.setSelected(true);
        
        if (ConfigObj.getInstance().getMonitorFollowMainControls()){
            monitorDisplayHide();
        }
    }
    
    public void monitorDisplayShow(){
        int time = ConfigObj.getInstance().getSlideShowHideTime();
        
        btnMonitorShow.setSelected(true);
        btnMonitorHide.setSelected(false);
        
        if ( ConfigObj.getInstance().getMonitorOutput() ){
            ContentManager.getMonitorDisplay().slideShow( time );
        }
    }
    
    public void monitorDisplayHide(){
        int time = ConfigObj.getInstance().getSlideShowHideTime();

        btnMonitorShow.setSelected(false);
        btnMonitorHide.setSelected(true);

        if ( ConfigObj.getInstance().getMonitorOutput() ){
            ContentManager.getMonitorDisplay().slideHide( time );
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel10 = new javax.swing.JLabel();
        btnMainBlack = new javax.swing.JToggleButton();
        btnMainClear = new javax.swing.JToggleButton();
        jLabel15 = new javax.swing.JLabel();
        jSliderShowHideSpeed = new javax.swing.JSlider();
        jSliderSlideChangeSpeed = new javax.swing.JSlider();
        jLabel16 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        templateMonitor = new datasoul.templates.TemplateComboBox();
        jPanel1 = new javax.swing.JPanel();
        btnMonitorClear = new javax.swing.JToggleButton();
        btnMonitorBlack = new javax.swing.JToggleButton();
        btnMonitorHide = new javax.swing.JToggleButton();
        btnMonitorShow = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        cbMonitorFollowMain = new javax.swing.JCheckBox();
        btnHide = new javax.swing.JToggleButton();
        btnShow = new javax.swing.JToggleButton();

        setAutoscrolls(true);
        jLabel10.setText("Main Output:");

        btnMainBlack.setText("Black");
        btnMainBlack.setToolTipText("Makes the main window black");
        btnMainBlack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainBlackActionPerformed(evt);
            }
        });

        btnMainClear.setText("Clear");
        btnMainClear.setToolTipText("Clear the main window");
        btnMainClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainClearActionPerformed(evt);
            }
        });

        jLabel15.setText("Show/Hide Speed:");

        jSliderShowHideSpeed.setMajorTickSpacing(5);
        jSliderShowHideSpeed.setMaximum(30);
        jSliderShowHideSpeed.setMinorTickSpacing(1);
        jSliderShowHideSpeed.setPaintLabels(true);
        jSliderShowHideSpeed.setPaintTicks(true);
        jSliderShowHideSpeed.setValue(10);
        jSliderShowHideSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderShowHideSpeedStateChanged(evt);
            }
        });

        jSliderSlideChangeSpeed.setMajorTickSpacing(5);
        jSliderSlideChangeSpeed.setMaximum(30);
        jSliderSlideChangeSpeed.setMinorTickSpacing(1);
        jSliderSlideChangeSpeed.setPaintLabels(true);
        jSliderSlideChangeSpeed.setPaintTicks(true);
        jSliderSlideChangeSpeed.setValue(2);
        jSliderSlideChangeSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderSlideChangeSpeedStateChanged(evt);
            }
        });

        jLabel16.setText("Slide Change Transition Speed:");

        jLabel2.setText("Monitor:");

        templateMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateMonitorActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 3, 0));

        btnMonitorClear.setText("Clear");
        btnMonitorClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMonitorClearActionPerformed(evt);
            }
        });

        jPanel1.add(btnMonitorClear);

        btnMonitorBlack.setText("Black");
        btnMonitorBlack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMonitorBlackActionPerformed(evt);
            }
        });

        jPanel1.add(btnMonitorBlack);

        btnMonitorHide.setSelected(true);
        btnMonitorHide.setText("Hide");
        btnMonitorHide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMonitorHideActionPerformed(evt);
            }
        });

        jPanel1.add(btnMonitorHide);

        btnMonitorShow.setText("Show");
        btnMonitorShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMonitorShowActionPerformed(evt);
            }
        });

        jPanel1.add(btnMonitorShow);

        jLabel1.setText("Template:");

        cbMonitorFollowMain.setText("Monitor follows Main Output controls");
        cbMonitorFollowMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbMonitorFollowMain.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbMonitorFollowMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMonitorFollowMainActionPerformed(evt);
            }
        });

        btnHide.setSelected(true);
        btnHide.setText("Hide");
        btnHide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHideActionPerformed(evt);
            }
        });

        btnShow.setText("Show");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel10)
                    .add(jLabel15)
                    .add(jLabel16)
                    .add(jSliderSlideChangeSpeed, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                    .add(jLabel2)
                    .add(jSliderShowHideSpeed, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(templateMonitor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                    .add(cbMonitorFollowMain)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, btnHide, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, btnMainClear, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnShow, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                            .add(btnMainBlack, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)))
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel10)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnMainClear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnMainBlack, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(btnShow, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(btnHide, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel15)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSliderShowHideSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel16)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSliderSlideChangeSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(templateMonitor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cbMonitorFollowMain)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(37, 37, 37))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnMonitorShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMonitorShowActionPerformed
        if (btnMonitorShow.isSelected()){
            this.monitorDisplayShow();
        }
    }//GEN-LAST:event_btnMonitorShowActionPerformed

    private void btnMonitorHideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMonitorHideActionPerformed
        if (btnMonitorHide.isSelected()){
            this.monitorDisplayHide();
        }
    }//GEN-LAST:event_btnMonitorHideActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        if (btnShow.isSelected()){
            this.mainDisplayShow();
        }
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnHideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHideActionPerformed
        if (btnHide.isSelected()){
            this.mainDisplayHide();
        }
    }//GEN-LAST:event_btnHideActionPerformed

    private void cbMonitorFollowMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMonitorFollowMainActionPerformed

        ConfigObj.getInstance().setMonitorFollowMainControls( cbMonitorFollowMain.isSelected() );
        updateMonitorControls();
        
    }//GEN-LAST:event_cbMonitorFollowMainActionPerformed

    private void updateMonitorControls(){
        
        boolean b = ! ConfigObj.getInstance().getMonitorFollowMainControls();
        btnMonitorBlack.setEnabled(b);
        btnMonitorClear.setEnabled(b);
        btnMonitorHide.setEnabled(b);
        btnMonitorShow.setEnabled(b);
        
    }
    
    private void jSliderSlideChangeSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderSlideChangeSpeedStateChanged

        ConfigObj.getInstance().setSlideTransitionTime( jSliderSlideChangeSpeed.getValue() * 100 );
        
    }//GEN-LAST:event_jSliderSlideChangeSpeedStateChanged

    private void jSliderShowHideSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderShowHideSpeedStateChanged
        
        ConfigObj.getInstance().setSlideShowHideTime( jSliderShowHideSpeed.getValue() * 100 );
        
    }//GEN-LAST:event_jSliderShowHideSpeedStateChanged

    private void btnMonitorBlackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMonitorBlackActionPerformed
        if ( ConfigObj.getInstance().getMonitorOutput() ){
            if( btnMonitorBlack.isSelected() ){
                ContentManager.getMonitorDisplay().setBlack( 1 );
            }else{
                ContentManager.getMonitorDisplay().setBlack( 0 );
            }
        }
    }//GEN-LAST:event_btnMonitorBlackActionPerformed

    private void btnMonitorClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMonitorClearActionPerformed
        if ( ConfigObj.getInstance().getMonitorOutput() ){
            if( btnMonitorClear.isSelected() ){
                ContentManager.getMonitorDisplay().setClear( 1 );
            }else{
                ContentManager.getMonitorDisplay().setClear( 0 );
            }
        }
    }//GEN-LAST:event_btnMonitorClearActionPerformed

    private void templateMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_templateMonitorActionPerformed

        if (templateMonitor.getSelectedItem() != null){
            ContentManager.getInstance().setTemplateMonitorLive( templateMonitor.getSelectedItem().toString() );
            ContentManager.getInstance().slideChange(-1);
        }
        
    }//GEN-LAST:event_templateMonitorActionPerformed

    private void btnMainClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainClearActionPerformed

        this.mainDisplayClean();
    }//GEN-LAST:event_btnMainClearActionPerformed

    private void btnMainBlackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainBlackActionPerformed

        this.mainDisplayBlack();
    }//GEN-LAST:event_btnMainBlackActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnHide;
    private javax.swing.JToggleButton btnMainBlack;
    private javax.swing.JToggleButton btnMainClear;
    private javax.swing.JToggleButton btnMonitorBlack;
    private javax.swing.JToggleButton btnMonitorClear;
    private javax.swing.JToggleButton btnMonitorHide;
    private javax.swing.JToggleButton btnMonitorShow;
    private javax.swing.JToggleButton btnShow;
    private javax.swing.JCheckBox cbMonitorFollowMain;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSliderShowHideSpeed;
    private javax.swing.JSlider jSliderSlideChangeSpeed;
    private datasoul.templates.TemplateComboBox templateMonitor;
    // End of variables declaration//GEN-END:variables
    
}
