/*
 * ServiceItemTable.java
 *
 * Created on February 10, 2006, 11:22 PM
 */

package datasoul.datashow;

import java.awt.event.KeyListener;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author  samuelm
 */
public class ServiceItemTable extends javax.swing.JPanel {
    
    ServiceItem item;
    
    /** Creates new form ServiceItemTable */
    public ServiceItemTable() {
        initComponents();
        Hashtable<Integer, JLabel> labels = new Hashtable<Integer, JLabel>();
        labels.put( 1, new JLabel("Small") );
        labels.put( 5, new JLabel("Large") );
        jSliderZoom.setLabelTable(labels);

        ServiceItem empty = new ServiceItem();
        setServiceItem(empty);
        
        this.displayTable.addKeyListener(new liveTableKeyListner(this));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();
        jSliderZoom = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        lblTemplate = new javax.swing.JLabel();

        jScrollPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane1ComponentResized(evt);
            }
        });
        jScrollPane1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jScrollPane1PropertyChange(evt);
            }
        });

        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(displayTable);

        jSliderZoom.setMaximum(5);
        jSliderZoom.setMinimum(1);
        jSliderZoom.setPaintLabels(true);
        jSliderZoom.setSnapToTicks(true);
        jSliderZoom.setValue(3);
        jSliderZoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderZoomStateChanged(evt);
            }
        });

        jLabel1.setText("Template:");

        lblTemplate.setText("(none)");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblTemplate)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 78, Short.MAX_VALUE)
                .add(jSliderZoom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSliderZoom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(lblTemplate)
                            .add(jLabel1))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jScrollPane1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jScrollPane1PropertyChange

    }//GEN-LAST:event_jScrollPane1PropertyChange

    private void jSliderZoomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderZoomStateChanged
        int newSize = jSliderZoom.getValue();
        if (item != null){
            item.setZoom( jSliderZoom.getValue() );
            item.updateHeights(displayTable);
        }
        
    }//GEN-LAST:event_jSliderZoomStateChanged

    private void jScrollPane1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane1ComponentResized
        if (item != null){
            item.updateHeights(displayTable);
        }
        
    }//GEN-LAST:event_jScrollPane1ComponentResized
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable displayTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSliderZoom;
    private javax.swing.JLabel lblTemplate;
    // End of variables declaration//GEN-END:variables
    
    public void setServiceItem(ServiceItem item){
        this.item = item;
        item.registerJTable(displayTable); 
        item.setZoom( jSliderZoom.getValue() );
        item.updateHeights(displayTable);        
        lblTemplate.setText( item.getTemplate() );
        setSlideIndex(0);
    }

    public ServiceItem getServiceItem(){
        return this.item;        
    }
    
    public void addTableListener(ListSelectionListener listener){
        displayTable.getSelectionModel().addListSelectionListener(listener);
    }
    
    public String getSlideText(){
        
        int selectedRow = displayTable.getSelectedRow();
        if (selectedRow == -1) {
            selectedRow = 0;
        }

        if (! (item instanceof TextServiceItem)){
            return "";
        }
        
        return ((TextServiceItem)item).getSlideText(selectedRow);
    }

    public String getNextSlideText(){
        
        int selectedRow = displayTable.getSelectedRow();
        if (selectedRow == -1) {
            selectedRow = 0;
        }
        
        if (selectedRow+1 >= displayTable.getRowCount()){
            return "";
        }

        if (! (item instanceof TextServiceItem)){
            return "";
        }
        
        return ((TextServiceItem)item).getSlideText(selectedRow+1);
    }
    
    public int getSlideIndex(){
        return displayTable.getSelectedRow();
    }

    public void setSlideIndex(int x){
        displayTable.changeSelection(x, 1, false, false);
    }

    public int getSlideCount(){
        return displayTable.getRowCount();
    }
    
}
