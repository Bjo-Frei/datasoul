/*
 * SongExport.java
 *
 * Created on 24 de Outubro de 2006, 21:20
 */

package datasoul.song;

import datasoul.datashow.ServiceListTable;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author  Administrador
 */
public class SongExportPanel extends javax.swing.JFrame {
    
    /** Creates new form SongExport */
    public SongExportPanel() {
        initComponents();
        this.center();

        comboSongVersion.removeAllItems();
        comboSongVersion.addItem(SongViewer.VIEW_LYRICS);
        comboSongVersion.addItem(SongViewer.VIEW_CHORDS_COMPLETE);
        comboSongVersion.addItem(SongViewer.VIEW_CHORDS_SIMPLIFIED);
        comboSongVersion.setSelectedIndex(0);
        
        comboSongVersion.setEnabled(false);
        checkChordsShape.setEnabled(false);
    }
    
    public void center(){
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        Rectangle frame = getBounds();
        setLocation((screen.width - frame.width)/2, (screen.height - frame.height)/2);
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        fieldFile = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnSelectFile = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        checkSongList = new javax.swing.JCheckBox();
        comboSongVersion = new javax.swing.JComboBox();
        checkSong = new javax.swing.JCheckBox();
        checkChordsShape = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("datasoul/internationalize"); // NOI18N
        btnOk.setText(bundle.getString("Ok")); // NOI18N
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnCancel.setText(bundle.getString("Cancel")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel2.setText(bundle.getString("File:")); // NOI18N

        btnSelectFile.setText(bundle.getString("Select_File...")); // NOI18N
        btnSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFileActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        checkSongList.setText(bundle.getString("Song_list")); // NOI18N
        checkSongList.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkSongList.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkSongList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSongListActionPerformed(evt);
            }
        });

        comboSongVersion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboSongVersion.setEnabled(false);
        comboSongVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSongVersionActionPerformed(evt);
            }
        });

        checkSong.setText(bundle.getString("Song")); // NOI18N
        checkSong.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkSong.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSongActionPerformed(evt);
            }
        });

        checkChordsShape.setText(bundle.getString("Chords_Shape")); // NOI18N
        checkChordsShape.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkChordsShape.setEnabled(false);
        checkChordsShape.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(checkSongList)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(checkSong)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(comboSongVersion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(checkChordsShape))
                .addContainerGap(132, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(checkSongList)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(checkSong)
                    .add(comboSongVersion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checkChordsShape)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(btnOk, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(fieldFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnSelectFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(fieldFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnSelectFile))
                .add(17, 17, 17)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnCancel)
                    .add(btnOk))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboSongVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSongVersionActionPerformed
        if( comboSongVersion.getSelectedItem()!=null                                       &&
            (comboSongVersion.getSelectedItem().equals(SongViewer.VIEW_CHORDS_COMPLETE)    ||
            comboSongVersion.getSelectedItem().equals(SongViewer.VIEW_CHORDS_SIMPLIFIED))  ){
                checkChordsShape.setEnabled(true);
        }else{
                checkChordsShape.setEnabled(false);
        }
    }//GEN-LAST:event_comboSongVersionActionPerformed

    private void checkSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSongActionPerformed
        comboSongVersion.setEnabled(checkSong.isSelected());
        checkChordsShape.setEnabled(false);
    }//GEN-LAST:event_checkSongActionPerformed

    private void checkSongListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSongListActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_checkSongListActionPerformed

    private void btnSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFileActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new javax.swing.filechooser.FileFilter() { 
                      public boolean accept(File f) { 
                          if (f.isDirectory()) { 
                              return true; 
                          } 
                          String name = f.getName(); 
                          if (name.endsWith(".rtf")) { 
                              return true; 
                          } 
                          return false; 
                      } 
   
                      public String getDescription() { 
                          return ".rtf"; 
                      } 
                  });
        File dir = new File (System.getProperty("user.dir") + System.getProperty("file.separator") + "songs");
        fc.setCurrentDirectory(dir);
        fc.setDialogTitle(java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Select_the_file_to_export"));
        if(fc.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
                String filePath = fc.getSelectedFile().getPath();
                if(!filePath.contains(".rtf"))
                    filePath = filePath + ".rtf";

                this.fieldFile.setText(filePath);
        }

    }//GEN-LAST:event_btnSelectFileActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        if(this.fieldFile.getText().length()==0){
            JOptionPane.showMessageDialog(this,java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("You_must_select_a_file_name"));
            return;
        }

        ByteArrayOutputStream osOut = new ByteArrayOutputStream();

        //first of all is printed the format got from a song
        osOut = printSongFormat(osOut);
        if(checkSongList.isSelected())
            osOut = printSongList(osOut);
        
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(this.fieldFile.getText());
            fos.write(osOut.toByteArray());
            osOut.close();
            
            if(checkSong.isEnabled()&&checkSong.isSelected())
                printAllSongs(fos);
                
            ByteArrayOutputStream osFinish = new ByteArrayOutputStream();    
            osFinish.write("\n}".getBytes());                            
            fos.write(osFinish.toByteArray());
            osFinish.close();
            
            fos.close();

        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        JOptionPane.showMessageDialog(this,java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("File_generated_correclty"));
        this.dispose();
    }//GEN-LAST:event_btnOkActionPerformed
    
    private void printAllSongs(FileOutputStream fos){
        try {
            SongViewer svp = new SongViewer();
            for(int i=0;i<ServiceListTable.getActiveInstance().getRowCount();i++){
                    if(ServiceListTable.getActiveInstance().getValueAt(i,0) instanceof Song){
                        ByteArrayOutputStream osOut = new ByteArrayOutputStream();
                        ByteArrayOutputStream osAux = new ByteArrayOutputStream();

                        //insert page
                        osOut.write("\n\\".getBytes());
                        
                        Song song = (Song)ServiceListTable.getActiveInstance().getValueAt(i,0);
                        svp.setView(this.comboSongVersion.getSelectedItem().toString());
                        svp.viewSong(song);
                        osAux = svp.exportRTFSong(osOut, checkChordsShape.isSelected());
                        String aux = osAux.toString();
                        int index = aux.indexOf("}}")+2;
                        osOut.write(osAux.toByteArray(),index,osAux.size()-index-2);

                        fos.write(osOut.toByteArray());

                        fos.flush();
                        
                        osOut.close();
                        osAux.close();

                    }
                }
            } catch (Exception ex) {
            }
        return;
    }

    private ByteArrayOutputStream printSongFormat(ByteArrayOutputStream os){
        ByteArrayOutputStream osOut = new ByteArrayOutputStream();
        
        try {
                if(ServiceListTable.getActiveInstance().getRowCount()>0){
                    if(ServiceListTable.getActiveInstance().getValueAt(0,0) instanceof Song){
                        Song song = (Song)ServiceListTable.getActiveInstance().getValueAt(0,0);
                        SongViewer svp = new SongViewer();
                        svp.setView(this.comboSongVersion.getSelectedItem().toString());
                        svp.viewSong(song);
                        ByteArrayOutputStream baosAux = svp.exportRTFSong(os, checkChordsShape.isSelected());
                        
                        String aux = baosAux.toString();
                        int indexFinishFormat = aux.indexOf("}}")+2;
                        //prints only format
                        osOut.write(baosAux.toByteArray(),0,indexFinishFormat);                  
                    }
                }
                

            } catch (Exception ex) {
            }
        return osOut;
    }
    
    
    private ByteArrayOutputStream printSongList(ByteArrayOutputStream os){
        ByteArrayOutputStream osOut = new ByteArrayOutputStream();
        boolean firstPage = true;
        
        if(os.toByteArray().length>0){
            osOut.write(os.toByteArray(),0,os.toByteArray().length);                  
            firstPage = false;
        }
              
        try {
            StyleContext sc = new StyleContext();
            Style defaultStyle = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
            Style nameStyle = sc.addStyle("songListNameStyle",defaultStyle);
            StyleConstants.setForeground(nameStyle,Color.BLACK);
            StyleConstants.setBackground(nameStyle,Color.white);
            StyleConstants.setFontFamily(nameStyle,"Arial");
            StyleConstants.setFontSize(nameStyle,18);

            JEditorPane jep = new JEditorPane();
            jep.setContentType("text/rtf");

            javax.swing.text.Document doc = jep.getDocument();

            doc.insertString(doc.getLength(),java.util.ResourceBundle.getBundle("datasoul/internationalize").getString("Service_List_\\n\\n"),nameStyle);
            StyleConstants.setFontSize(nameStyle,12);

            for(int i=0;i<ServiceListTable.getActiveInstance().getRowCount();i++){
                doc.insertString(doc.getLength(),(i+1)+") "+ServiceListTable.getActiveInstance().getValueAt(i,0).toString()+"\n",nameStyle);
            }

            int length = doc.getLength();
            doc.getDefaultRootElement().getElement(0);
            
            if(firstPage){
                jep.getEditorKit().write(osOut, doc, 0, length);
            }else{
                ByteArrayOutputStream osAux = new ByteArrayOutputStream();
                jep.getEditorKit().write(osAux, doc, 0, length);
                String aux = osAux.toString();
                int index = aux.indexOf("}}")+2;
                osOut.write(osAux.toByteArray(),index,osAux.size()-index-2);

        }
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        return osOut;        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnSelectFile;
    private javax.swing.JCheckBox checkChordsShape;
    private javax.swing.JCheckBox checkSong;
    private javax.swing.JCheckBox checkSongList;
    private javax.swing.JComboBox comboSongVersion;
    private javax.swing.JTextField fieldFile;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    
}
